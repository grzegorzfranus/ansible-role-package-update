# =============================================================================
# Ansible Role: Package-Update - Molecule Verification Playbook
# =============================================================================
# This playbook verifies the installation and configuration of Package-Update.
# It performs comprehensive checks of:
# - Package management tools
# - Configuration files
# - System update status
# - Cleanup operations
# - Reboot configuration (if enabled)
#
# Flow:
# 1. Load variables and gather facts
# 2. Verify package managers
# 3. Check configuration status
# 4. Validate update operations
# 5. Verify cleanup operations
# =============================================================================

---
# -----------------------------------------------------------------------------
# 1. Environment Setup
# -----------------------------------------------------------------------------
- name: molecule | Verify Role
  hosts: all
  gather_facts: true

  vars_files:
    - ../../defaults/main.yml
    - ../../vars/main.yml

  tasks:
    - name: Verify | Gather OS specific variables
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ ansible_facts['distribution'] | lower }}_{{ ansible_facts['distribution_version'] | lower }}.yml"
            - "{{ ansible_facts['distribution'] | lower }}_{{ ansible_facts['distribution_major_version'] | lower }}.yml"
            - "{{ ansible_facts['distribution'] | lower }}.yml"
            - "{{ ansible_facts['os_family'] | lower }}_{{ ansible_facts['distribution_version'] | lower }}.yml"
            - "{{ ansible_facts['os_family'] | lower }}_{{ ansible_facts['distribution_major_version'].split('.')[0] }}.yml"
            - "{{ ansible_facts['os_family'] | lower }}.yml"
            - "main.yml"
          paths:
            - "../../vars"

    # -----------------------------------------------------------------------------
    # 2. Package Manager Verification
    # -----------------------------------------------------------------------------
    - name: Verify | Check apt presence (Debian)
      ansible.builtin.command:
        cmd: which apt
      register: _apt_result_
      changed_when: false
      ignore_errors: true
      when: >
        ansible_os_family == "Debian"

    - name: Verify | Check dnf presence (RedHat)
      ansible.builtin.command:
        cmd: which dnf
      register: _dnf_result_
      changed_when: false
      ignore_errors: true
      when: >
        ansible_os_family == "RedHat"

    - name: Verify | Check package management tools availability
      ansible.builtin.debug:
        msg: "Package manager available: {{ (ansible_os_family == 'Debian' and _apt_result_.rc == 0) or (ansible_os_family == 'RedHat' and _dnf_result_.rc == 0) }}"

    # -----------------------------------------------------------------------------
    # 3. Configuration Verification
    # -----------------------------------------------------------------------------
    - name: Verify | Check if update configuration files exist (Debian)
      ansible.builtin.stat:
        path: "{{ item }}"
      register: _apt_config_files_result_
      with_items:
        - /etc/apt/apt.conf.d/20auto-upgrades
      ignore_errors: true
      when: >
        ansible_os_family == "Debian"

    - name: Verify | Check if update configuration files exist (RedHat)
      ansible.builtin.stat:
        path: "{{ item }}"
      register: _dnf_config_files_result_
      with_items:
        - /etc/dnf/automatic.conf
      ignore_errors: true
      when: >
        ansible_os_family == "RedHat"

    # -----------------------------------------------------------------------------
    # 4. System Status Verification
    # -----------------------------------------------------------------------------
    - name: Verify | Check system update status
      ansible.builtin.command:
        cmd: "{{ (ansible_os_family == 'Debian') | ternary('apt-get -s upgrade', 'dnf check-update') }}"
      register: _update_status_
      changed_when: false
      ignore_errors: true

    - name: Verify | Show update status
      ansible.builtin.debug:
        msg: "Updates available: {{ _update_status_.rc != 0 }}"

    # -----------------------------------------------------------------------------
    # 5. Cleanup Verification
    # -----------------------------------------------------------------------------
    - name: Verify | Check for orphaned packages (Debian)
      ansible.builtin.command:
        cmd: apt-get --dry-run autoremove
      register: _autoremove_status_
      changed_when: false
      ignore_errors: true
      when: >
        ansible_os_family == "Debian"

    - name: Verify | Check for orphaned packages (RedHat)
      ansible.builtin.command:
        cmd: dnf autoremove --assumeno
      register: _autoremove_status_
      changed_when: false
      ignore_errors: true
      when: >
        ansible_os_family == "RedHat"
